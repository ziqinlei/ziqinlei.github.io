{"meta":{"title":"Ziqin Lei's Home","subtitle":null,"description":null,"author":"Ziqin Lei","url":"http://yoursite.com"},"pages":[{"title":"tags","date":"2018-05-13T14:09:18.000Z","updated":"2018-05-13T14:26:17.443Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2018-05-13T14:09:37.000Z","updated":"2018-05-13T14:26:05.895Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Java 中静态代码块及对象的初始化顺序","slug":"Java Initialization","date":"2018-05-13T07:38:34.000Z","updated":"2018-05-13T14:28:22.250Z","comments":true,"path":"2018/05/13/Java Initialization/","link":"","permalink":"http://yoursite.com/2018/05/13/Java Initialization/","excerpt":"第一篇文章，文章内容是 17年1月3日写于CSDN，当时还在学 Java 基础内容。","text":"第一篇文章，文章内容是 17年1月3日写于CSDN，当时还在学 Java 基础内容。 创建3个类1、MyPrint类，用于打印变量12345public class MyPrint &#123; public MyPrint(String word) &#123; System.out.println(word); &#125;&#125; 2、Parent类1234567891011121314151617public class Parent &#123; static MyPrint MP = new MyPrint(\"Parent's static variable\");//1 MyPrint mp = new MyPrint(\"Parent's member variable\");//5 static &#123; System.out.println(\"Parent's static code block\");//2 &#125; &#123; System.out.println(\"Parent's code block\");//6 &#125; public Parent() &#123; System.out.println(\"Parent's Constructor\");//7 &#125;&#125; 3、Child类1234567891011121314151617public class Child extends Parent &#123; static &#123; System.out.println(\"Child's static code block\");//3 &#125; static MyPrint MP = new MyPrint(\"Child's static variable\");//4 &#123; System.out.println(\"Child's code block\");//8 &#125; MyPrint mp = new MyPrint(\"Child's member variable\");//9 public Child() &#123; System.out.println(\"Child's Constructor\");//10 &#125;&#125; 创建Test类12345public class Test &#123; public static void main(String[] args) &#123; new Child(); &#125;&#125; 运行Test类，得到以下输出结果：12345678910Parent's static variableParent's static code blockChild's static code blockChild's static variableParent's member variableParent's code blockParent's ConstructorChild's code blockChild's member variableChild's Constructor 结果分析Test类中主函数执行，new Child();后的执行顺序已在代码中标出。通过上述，总结子类继承父类时的初始化顺序：1、父类静态变量和静态代码块（先声明的先执行）；2、子类静态变量和静态代码块（先声明的先执行）；3、父类的成员变量和代码块（先声明的先执行）；4、父类的构造函数；5、子类的成员变量和代码块（先声明的先执行）；6、子类的构造函数。 再简练点：1、初始化父类和子类的静态变量和静态代码块；2、初始化父类的成员变量和代码块，而后调用父类的构造函数；3、初始化子类的成员变量和代码块，而后调用子类的构造函数。 总结1、所有初始化过程都在构造函数被调用之前发生；2、静态初始化只有在必要时刻才会进行，并且只在对象被第一次创建（或者第一次访问静态数据）时，它才会被初始化，此后，静态对象不会再次被初始化；3、初始化顺序一般是先静态，后非静态。","categories":[{"name":"Java 基础","slug":"Java-基础","permalink":"http://yoursite.com/categories/Java-基础/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]}]}