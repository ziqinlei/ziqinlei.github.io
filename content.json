{"meta":{"title":"Ziqin Lei's Home","subtitle":null,"description":null,"author":"Ziqin Lei","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"Java 中静态代码块及对象的初始化顺序","slug":"Java Initialization","date":"2018-05-13T07:38:34.000Z","updated":"2018-05-13T12:54:17.227Z","comments":true,"path":"2018/05/13/Java Initialization/","link":"","permalink":"http://yoursite.com/2018/05/13/Java Initialization/","excerpt":"","text":"创建3个类1、MyPrint类，用于打印变量12345public class MyPrint &#123; public MyPrint(String word) &#123; System.out.println(word); &#125;&#125; 2、Parent类1234567891011121314151617public class Parent &#123; static MyPrint MP = new MyPrint(\"Parent's static variable\");//1 MyPrint mp = new MyPrint(\"Parent's member variable\");//5 static &#123; System.out.println(\"Parent's static code block\");//2 &#125; &#123; System.out.println(\"Parent's code block\");//6 &#125; public Parent() &#123; System.out.println(\"Parent's Constructor\");//7 &#125;&#125; 3、Child类1234567891011121314151617public class Child extends Parent &#123; static &#123; System.out.println(\"Child's static code block\");//3 &#125; static MyPrint MP = new MyPrint(\"Child's static variable\");//4 &#123; System.out.println(\"Child's code block\");//8 &#125; MyPrint mp = new MyPrint(\"Child's member variable\");//9 public Child() &#123; System.out.println(\"Child's Constructor\");//10 &#125;&#125; 创建Test类12345public class Test &#123; public static void main(String[] args) &#123; new Child(); &#125;&#125; 运行Test类，得到以下输出结果：12345678910Parent's static variableParent's static code blockChild's static code blockChild's static variableParent's member variableParent's code blockParent's ConstructorChild's code blockChild's member variableChild's Constructor 结果分析Test类中主函数执行，new Child();后的执行顺序已在代码中标出。通过上述，总结子类继承父类时的初始化顺序：1、父类静态变量和静态代码块（先声明的先执行）；2、子类静态变量和静态代码块（先声明的先执行）；3、父类的成员变量和代码块（先声明的先执行）；4、父类的构造函数；5、子类的成员变量和代码块（先声明的先执行）；6、子类的构造函数。 再简练点：1、初始化父类和子类的静态变量和静态代码块；2、初始化父类的成员变量和代码块，而后调用父类的构造函数；3、初始化子类的成员变量和代码块，而后调用子类的构造函数。 总结1、所有初始化过程都在构造函数被调用之前发生；2、静态初始化只有在必要时刻才会进行，并且只在对象被第一次创建（或者第一次访问静态数据）时，它才会被初始化，此后，静态对象不会再次被初始化；3、初始化顺序一般是先静态，后非静态。","categories":[{"name":"编程","slug":"编程","permalink":"http://yoursite.com/categories/编程/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-05-13T07:34:26.645Z","updated":"2018-05-13T07:34:26.645Z","comments":true,"path":"2018/05/13/hello-world/","link":"","permalink":"http://yoursite.com/2018/05/13/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}